/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 560.0, "minX": 0.0, "maxY": 48368.0, "series": [{"data": [[0.0, 560.0], [0.1, 569.0], [0.2, 573.0], [0.3, 573.0], [0.4, 573.0], [0.5, 574.0], [0.6, 575.0], [0.7, 576.0], [0.8, 576.0], [0.9, 577.0], [1.0, 578.0], [1.1, 578.0], [1.2, 579.0], [1.3, 579.0], [1.4, 579.0], [1.5, 579.0], [1.6, 580.0], [1.7, 580.0], [1.8, 581.0], [1.9, 581.0], [2.0, 581.0], [2.1, 582.0], [2.2, 582.0], [2.3, 582.0], [2.4, 583.0], [2.5, 583.0], [2.6, 583.0], [2.7, 583.0], [2.8, 584.0], [2.9, 584.0], [3.0, 584.0], [3.1, 584.0], [3.2, 584.0], [3.3, 585.0], [3.4, 585.0], [3.5, 585.0], [3.6, 586.0], [3.7, 586.0], [3.8, 586.0], [3.9, 587.0], [4.0, 587.0], [4.1, 587.0], [4.2, 587.0], [4.3, 587.0], [4.4, 588.0], [4.5, 588.0], [4.6, 588.0], [4.7, 588.0], [4.8, 588.0], [4.9, 589.0], [5.0, 589.0], [5.1, 589.0], [5.2, 589.0], [5.3, 590.0], [5.4, 590.0], [5.5, 590.0], [5.6, 591.0], [5.7, 591.0], [5.8, 591.0], [5.9, 592.0], [6.0, 592.0], [6.1, 592.0], [6.2, 592.0], [6.3, 593.0], [6.4, 593.0], [6.5, 593.0], [6.6, 593.0], [6.7, 593.0], [6.8, 594.0], [6.9, 594.0], [7.0, 594.0], [7.1, 595.0], [7.2, 595.0], [7.3, 596.0], [7.4, 596.0], [7.5, 597.0], [7.6, 597.0], [7.7, 597.0], [7.8, 598.0], [7.9, 598.0], [8.0, 598.0], [8.1, 599.0], [8.2, 599.0], [8.3, 599.0], [8.4, 600.0], [8.5, 600.0], [8.6, 600.0], [8.7, 601.0], [8.8, 601.0], [8.9, 601.0], [9.0, 601.0], [9.1, 602.0], [9.2, 602.0], [9.3, 602.0], [9.4, 603.0], [9.5, 603.0], [9.6, 603.0], [9.7, 604.0], [9.8, 604.0], [9.9, 604.0], [10.0, 604.0], [10.1, 604.0], [10.2, 605.0], [10.3, 605.0], [10.4, 605.0], [10.5, 606.0], [10.6, 606.0], [10.7, 607.0], [10.8, 607.0], [10.9, 608.0], [11.0, 608.0], [11.1, 608.0], [11.2, 609.0], [11.3, 609.0], [11.4, 610.0], [11.5, 610.0], [11.6, 611.0], [11.7, 611.0], [11.8, 612.0], [11.9, 612.0], [12.0, 613.0], [12.1, 613.0], [12.2, 613.0], [12.3, 613.0], [12.4, 614.0], [12.5, 614.0], [12.6, 615.0], [12.7, 615.0], [12.8, 616.0], [12.9, 616.0], [13.0, 616.0], [13.1, 616.0], [13.2, 617.0], [13.3, 617.0], [13.4, 618.0], [13.5, 618.0], [13.6, 618.0], [13.7, 619.0], [13.8, 620.0], [13.9, 620.0], [14.0, 620.0], [14.1, 622.0], [14.2, 623.0], [14.3, 624.0], [14.4, 625.0], [14.5, 625.0], [14.6, 626.0], [14.7, 626.0], [14.8, 627.0], [14.9, 628.0], [15.0, 629.0], [15.1, 630.0], [15.2, 630.0], [15.3, 631.0], [15.4, 633.0], [15.5, 634.0], [15.6, 635.0], [15.7, 635.0], [15.8, 635.0], [15.9, 637.0], [16.0, 637.0], [16.1, 637.0], [16.2, 638.0], [16.3, 638.0], [16.4, 639.0], [16.5, 640.0], [16.6, 641.0], [16.7, 641.0], [16.8, 642.0], [16.9, 642.0], [17.0, 643.0], [17.1, 643.0], [17.2, 644.0], [17.3, 645.0], [17.4, 647.0], [17.5, 647.0], [17.6, 648.0], [17.7, 648.0], [17.8, 649.0], [17.9, 649.0], [18.0, 650.0], [18.1, 650.0], [18.2, 651.0], [18.3, 652.0], [18.4, 653.0], [18.5, 653.0], [18.6, 655.0], [18.7, 655.0], [18.8, 656.0], [18.9, 657.0], [19.0, 659.0], [19.1, 659.0], [19.2, 660.0], [19.3, 661.0], [19.4, 662.0], [19.5, 663.0], [19.6, 663.0], [19.7, 663.0], [19.8, 664.0], [19.9, 665.0], [20.0, 666.0], [20.1, 667.0], [20.2, 668.0], [20.3, 668.0], [20.4, 669.0], [20.5, 669.0], [20.6, 672.0], [20.7, 672.0], [20.8, 673.0], [20.9, 673.0], [21.0, 674.0], [21.1, 675.0], [21.2, 675.0], [21.3, 675.0], [21.4, 676.0], [21.5, 676.0], [21.6, 677.0], [21.7, 678.0], [21.8, 680.0], [21.9, 680.0], [22.0, 680.0], [22.1, 681.0], [22.2, 682.0], [22.3, 682.0], [22.4, 684.0], [22.5, 684.0], [22.6, 686.0], [22.7, 686.0], [22.8, 687.0], [22.9, 688.0], [23.0, 689.0], [23.1, 690.0], [23.2, 692.0], [23.3, 692.0], [23.4, 693.0], [23.5, 695.0], [23.6, 695.0], [23.7, 697.0], [23.8, 697.0], [23.9, 697.0], [24.0, 698.0], [24.1, 699.0], [24.2, 700.0], [24.3, 701.0], [24.4, 702.0], [24.5, 702.0], [24.6, 703.0], [24.7, 704.0], [24.8, 705.0], [24.9, 705.0], [25.0, 708.0], [25.1, 708.0], [25.2, 710.0], [25.3, 711.0], [25.4, 712.0], [25.5, 713.0], [25.6, 715.0], [25.7, 715.0], [25.8, 716.0], [25.9, 717.0], [26.0, 718.0], [26.1, 718.0], [26.2, 719.0], [26.3, 720.0], [26.4, 721.0], [26.5, 722.0], [26.6, 722.0], [26.7, 725.0], [26.8, 726.0], [26.9, 726.0], [27.0, 728.0], [27.1, 729.0], [27.2, 731.0], [27.3, 731.0], [27.4, 732.0], [27.5, 732.0], [27.6, 735.0], [27.7, 736.0], [27.8, 737.0], [27.9, 741.0], [28.0, 741.0], [28.1, 742.0], [28.2, 743.0], [28.3, 743.0], [28.4, 745.0], [28.5, 745.0], [28.6, 747.0], [28.7, 748.0], [28.8, 749.0], [28.9, 750.0], [29.0, 750.0], [29.1, 751.0], [29.2, 753.0], [29.3, 754.0], [29.4, 755.0], [29.5, 755.0], [29.6, 757.0], [29.7, 757.0], [29.8, 758.0], [29.9, 761.0], [30.0, 762.0], [30.1, 764.0], [30.2, 765.0], [30.3, 766.0], [30.4, 767.0], [30.5, 769.0], [30.6, 770.0], [30.7, 771.0], [30.8, 774.0], [30.9, 775.0], [31.0, 777.0], [31.1, 778.0], [31.2, 779.0], [31.3, 780.0], [31.4, 780.0], [31.5, 781.0], [31.6, 782.0], [31.7, 783.0], [31.8, 784.0], [31.9, 785.0], [32.0, 787.0], [32.1, 788.0], [32.2, 791.0], [32.3, 793.0], [32.4, 795.0], [32.5, 795.0], [32.6, 798.0], [32.7, 798.0], [32.8, 799.0], [32.9, 800.0], [33.0, 803.0], [33.1, 804.0], [33.2, 806.0], [33.3, 806.0], [33.4, 809.0], [33.5, 810.0], [33.6, 811.0], [33.7, 812.0], [33.8, 813.0], [33.9, 814.0], [34.0, 816.0], [34.1, 819.0], [34.2, 821.0], [34.3, 822.0], [34.4, 824.0], [34.5, 824.0], [34.6, 827.0], [34.7, 828.0], [34.8, 829.0], [34.9, 833.0], [35.0, 837.0], [35.1, 839.0], [35.2, 841.0], [35.3, 842.0], [35.4, 844.0], [35.5, 845.0], [35.6, 846.0], [35.7, 847.0], [35.8, 851.0], [35.9, 853.0], [36.0, 854.0], [36.1, 854.0], [36.2, 855.0], [36.3, 859.0], [36.4, 860.0], [36.5, 862.0], [36.6, 863.0], [36.7, 865.0], [36.8, 866.0], [36.9, 868.0], [37.0, 871.0], [37.1, 875.0], [37.2, 876.0], [37.3, 877.0], [37.4, 879.0], [37.5, 880.0], [37.6, 883.0], [37.7, 884.0], [37.8, 886.0], [37.9, 887.0], [38.0, 889.0], [38.1, 891.0], [38.2, 893.0], [38.3, 894.0], [38.4, 898.0], [38.5, 899.0], [38.6, 902.0], [38.7, 903.0], [38.8, 905.0], [38.9, 905.0], [39.0, 907.0], [39.1, 908.0], [39.2, 911.0], [39.3, 914.0], [39.4, 917.0], [39.5, 917.0], [39.6, 920.0], [39.7, 920.0], [39.8, 922.0], [39.9, 927.0], [40.0, 928.0], [40.1, 929.0], [40.2, 933.0], [40.3, 937.0], [40.4, 938.0], [40.5, 940.0], [40.6, 945.0], [40.7, 947.0], [40.8, 949.0], [40.9, 951.0], [41.0, 953.0], [41.1, 954.0], [41.2, 956.0], [41.3, 957.0], [41.4, 964.0], [41.5, 968.0], [41.6, 973.0], [41.7, 977.0], [41.8, 979.0], [41.9, 981.0], [42.0, 983.0], [42.1, 984.0], [42.2, 986.0], [42.3, 986.0], [42.4, 987.0], [42.5, 988.0], [42.6, 990.0], [42.7, 992.0], [42.8, 994.0], [42.9, 995.0], [43.0, 1000.0], [43.1, 1002.0], [43.2, 1007.0], [43.3, 1016.0], [43.4, 1020.0], [43.5, 1020.0], [43.6, 1024.0], [43.7, 1027.0], [43.8, 1029.0], [43.9, 1029.0], [44.0, 1032.0], [44.1, 1033.0], [44.2, 1040.0], [44.3, 1044.0], [44.4, 1045.0], [44.5, 1045.0], [44.6, 1047.0], [44.7, 1047.0], [44.8, 1049.0], [44.9, 1050.0], [45.0, 1053.0], [45.1, 1055.0], [45.2, 1058.0], [45.3, 1063.0], [45.4, 1064.0], [45.5, 1069.0], [45.6, 1073.0], [45.7, 1076.0], [45.8, 1088.0], [45.9, 1089.0], [46.0, 1091.0], [46.1, 1091.0], [46.2, 1096.0], [46.3, 1100.0], [46.4, 1102.0], [46.5, 1104.0], [46.6, 1111.0], [46.7, 1113.0], [46.8, 1115.0], [46.9, 1116.0], [47.0, 1118.0], [47.1, 1120.0], [47.2, 1127.0], [47.3, 1131.0], [47.4, 1133.0], [47.5, 1134.0], [47.6, 1147.0], [47.7, 1151.0], [47.8, 1155.0], [47.9, 1158.0], [48.0, 1164.0], [48.1, 1165.0], [48.2, 1172.0], [48.3, 1176.0], [48.4, 1180.0], [48.5, 1181.0], [48.6, 1185.0], [48.7, 1187.0], [48.8, 1191.0], [48.9, 1194.0], [49.0, 1199.0], [49.1, 1202.0], [49.2, 1209.0], [49.3, 1210.0], [49.4, 1223.0], [49.5, 1230.0], [49.6, 1234.0], [49.7, 1240.0], [49.8, 1246.0], [49.9, 1248.0], [50.0, 1256.0], [50.1, 1259.0], [50.2, 1265.0], [50.3, 1267.0], [50.4, 1271.0], [50.5, 1275.0], [50.6, 1277.0], [50.7, 1280.0], [50.8, 1287.0], [50.9, 1292.0], [51.0, 1294.0], [51.1, 1295.0], [51.2, 1298.0], [51.3, 1302.0], [51.4, 1310.0], [51.5, 1311.0], [51.6, 1322.0], [51.7, 1324.0], [51.8, 1330.0], [51.9, 1335.0], [52.0, 1342.0], [52.1, 1342.0], [52.2, 1346.0], [52.3, 1348.0], [52.4, 1353.0], [52.5, 1354.0], [52.6, 1357.0], [52.7, 1358.0], [52.8, 1364.0], [52.9, 1367.0], [53.0, 1376.0], [53.1, 1377.0], [53.2, 1384.0], [53.3, 1393.0], [53.4, 1401.0], [53.5, 1408.0], [53.6, 1415.0], [53.7, 1418.0], [53.8, 1419.0], [53.9, 1420.0], [54.0, 1425.0], [54.1, 1439.0], [54.2, 1450.0], [54.3, 1452.0], [54.4, 1457.0], [54.5, 1459.0], [54.6, 1463.0], [54.7, 1470.0], [54.8, 1479.0], [54.9, 1481.0], [55.0, 1488.0], [55.1, 1490.0], [55.2, 1494.0], [55.3, 1501.0], [55.4, 1518.0], [55.5, 1523.0], [55.6, 1529.0], [55.7, 1530.0], [55.8, 1537.0], [55.9, 1539.0], [56.0, 1542.0], [56.1, 1550.0], [56.2, 1556.0], [56.3, 1562.0], [56.4, 1575.0], [56.5, 1576.0], [56.6, 1583.0], [56.7, 1590.0], [56.8, 1605.0], [56.9, 1608.0], [57.0, 1611.0], [57.1, 1622.0], [57.2, 1628.0], [57.3, 1633.0], [57.4, 1643.0], [57.5, 1645.0], [57.6, 1652.0], [57.7, 1657.0], [57.8, 1662.0], [57.9, 1671.0], [58.0, 1676.0], [58.1, 1681.0], [58.2, 1690.0], [58.3, 1694.0], [58.4, 1699.0], [58.5, 1710.0], [58.6, 1713.0], [58.7, 1719.0], [58.8, 1726.0], [58.9, 1734.0], [59.0, 1752.0], [59.1, 1762.0], [59.2, 1769.0], [59.3, 1771.0], [59.4, 1777.0], [59.5, 1791.0], [59.6, 1803.0], [59.7, 1813.0], [59.8, 1824.0], [59.9, 1830.0], [60.0, 1837.0], [60.1, 1841.0], [60.2, 1862.0], [60.3, 1877.0], [60.4, 1882.0], [60.5, 1890.0], [60.6, 1909.0], [60.7, 1915.0], [60.8, 1921.0], [60.9, 1925.0], [61.0, 1937.0], [61.1, 1943.0], [61.2, 1949.0], [61.3, 1951.0], [61.4, 1961.0], [61.5, 1965.0], [61.6, 1981.0], [61.7, 1991.0], [61.8, 2001.0], [61.9, 2003.0], [62.0, 2008.0], [62.1, 2012.0], [62.2, 2019.0], [62.3, 2021.0], [62.4, 2029.0], [62.5, 2034.0], [62.6, 2044.0], [62.7, 2047.0], [62.8, 2058.0], [62.9, 2065.0], [63.0, 2070.0], [63.1, 2076.0], [63.2, 2087.0], [63.3, 2095.0], [63.4, 2105.0], [63.5, 2114.0], [63.6, 2130.0], [63.7, 2142.0], [63.8, 2156.0], [63.9, 2160.0], [64.0, 2162.0], [64.1, 2176.0], [64.2, 2178.0], [64.3, 2187.0], [64.4, 2198.0], [64.5, 2207.0], [64.6, 2218.0], [64.7, 2237.0], [64.8, 2254.0], [64.9, 2260.0], [65.0, 2291.0], [65.1, 2300.0], [65.2, 2312.0], [65.3, 2323.0], [65.4, 2330.0], [65.5, 2334.0], [65.6, 2342.0], [65.7, 2354.0], [65.8, 2360.0], [65.9, 2368.0], [66.0, 2393.0], [66.1, 2413.0], [66.2, 2426.0], [66.3, 2432.0], [66.4, 2445.0], [66.5, 2452.0], [66.6, 2468.0], [66.7, 2474.0], [66.8, 2480.0], [66.9, 2487.0], [67.0, 2504.0], [67.1, 2510.0], [67.2, 2517.0], [67.3, 2523.0], [67.4, 2534.0], [67.5, 2537.0], [67.6, 2566.0], [67.7, 2570.0], [67.8, 2583.0], [67.9, 2597.0], [68.0, 2606.0], [68.1, 2607.0], [68.2, 2619.0], [68.3, 2630.0], [68.4, 2655.0], [68.5, 2658.0], [68.6, 2667.0], [68.7, 2685.0], [68.8, 2700.0], [68.9, 2705.0], [69.0, 2716.0], [69.1, 2728.0], [69.2, 2738.0], [69.3, 2742.0], [69.4, 2754.0], [69.5, 2766.0], [69.6, 2772.0], [69.7, 2776.0], [69.8, 2787.0], [69.9, 2796.0], [70.0, 2801.0], [70.1, 2812.0], [70.2, 2845.0], [70.3, 2856.0], [70.4, 2876.0], [70.5, 2912.0], [70.6, 2917.0], [70.7, 2943.0], [70.8, 2960.0], [70.9, 2995.0], [71.0, 3004.0], [71.1, 3034.0], [71.2, 3055.0], [71.3, 3070.0], [71.4, 3084.0], [71.5, 3101.0], [71.6, 3108.0], [71.7, 3123.0], [71.8, 3154.0], [71.9, 3177.0], [72.0, 3184.0], [72.1, 3205.0], [72.2, 3230.0], [72.3, 3258.0], [72.4, 3279.0], [72.5, 3311.0], [72.6, 3345.0], [72.7, 3369.0], [72.8, 3375.0], [72.9, 3416.0], [73.0, 3420.0], [73.1, 3424.0], [73.2, 3436.0], [73.3, 3464.0], [73.4, 3477.0], [73.5, 3509.0], [73.6, 3532.0], [73.7, 3552.0], [73.8, 3556.0], [73.9, 3569.0], [74.0, 3583.0], [74.1, 3622.0], [74.2, 3645.0], [74.3, 3698.0], [74.4, 3710.0], [74.5, 3723.0], [74.6, 3751.0], [74.7, 3766.0], [74.8, 3787.0], [74.9, 3804.0], [75.0, 3816.0], [75.1, 3836.0], [75.2, 3854.0], [75.3, 3891.0], [75.4, 3911.0], [75.5, 3937.0], [75.6, 3939.0], [75.7, 3970.0], [75.8, 3977.0], [75.9, 4040.0], [76.0, 4113.0], [76.1, 4164.0], [76.2, 4216.0], [76.3, 4260.0], [76.4, 4290.0], [76.5, 4314.0], [76.6, 4374.0], [76.7, 4447.0], [76.8, 4496.0], [76.9, 4511.0], [77.0, 4520.0], [77.1, 4566.0], [77.2, 4592.0], [77.3, 4622.0], [77.4, 4645.0], [77.5, 4667.0], [77.6, 4696.0], [77.7, 4776.0], [77.8, 4788.0], [77.9, 4854.0], [78.0, 4882.0], [78.1, 4901.0], [78.2, 4946.0], [78.3, 4954.0], [78.4, 4984.0], [78.5, 5057.0], [78.6, 5075.0], [78.7, 5122.0], [78.8, 5201.0], [78.9, 5216.0], [79.0, 5231.0], [79.1, 5294.0], [79.2, 5301.0], [79.3, 5312.0], [79.4, 5320.0], [79.5, 5357.0], [79.6, 5378.0], [79.7, 5434.0], [79.8, 5448.0], [79.9, 5522.0], [80.0, 5527.0], [80.1, 5593.0], [80.2, 5641.0], [80.3, 5671.0], [80.4, 5685.0], [80.5, 5773.0], [80.6, 5782.0], [80.7, 5796.0], [80.8, 5828.0], [80.9, 5869.0], [81.0, 5900.0], [81.1, 5963.0], [81.2, 6004.0], [81.3, 6014.0], [81.4, 6041.0], [81.5, 6069.0], [81.6, 6090.0], [81.7, 6127.0], [81.8, 6191.0], [81.9, 6229.0], [82.0, 6248.0], [82.1, 6291.0], [82.2, 6332.0], [82.3, 6356.0], [82.4, 6406.0], [82.5, 6432.0], [82.6, 6476.0], [82.7, 6493.0], [82.8, 6531.0], [82.9, 6618.0], [83.0, 6691.0], [83.1, 6708.0], [83.2, 6721.0], [83.3, 6760.0], [83.4, 6805.0], [83.5, 6864.0], [83.6, 6891.0], [83.7, 6928.0], [83.8, 6966.0], [83.9, 7022.0], [84.0, 7050.0], [84.1, 7059.0], [84.2, 7097.0], [84.3, 7206.0], [84.4, 7273.0], [84.5, 7284.0], [84.6, 7384.0], [84.7, 7409.0], [84.8, 7502.0], [84.9, 7576.0], [85.0, 7636.0], [85.1, 7719.0], [85.2, 7766.0], [85.3, 7872.0], [85.4, 7904.0], [85.5, 7957.0], [85.6, 8028.0], [85.7, 8086.0], [85.8, 8130.0], [85.9, 8207.0], [86.0, 8233.0], [86.1, 8323.0], [86.2, 8368.0], [86.3, 8464.0], [86.4, 8521.0], [86.5, 8563.0], [86.6, 8574.0], [86.7, 8652.0], [86.8, 8704.0], [86.9, 8793.0], [87.0, 8800.0], [87.1, 8911.0], [87.2, 8923.0], [87.3, 9015.0], [87.4, 9123.0], [87.5, 9148.0], [87.6, 9158.0], [87.7, 9294.0], [87.8, 9347.0], [87.9, 9393.0], [88.0, 9420.0], [88.1, 9503.0], [88.2, 9581.0], [88.3, 9658.0], [88.4, 9707.0], [88.5, 9757.0], [88.6, 9865.0], [88.7, 9938.0], [88.8, 10032.0], [88.9, 10199.0], [89.0, 10236.0], [89.1, 10305.0], [89.2, 10357.0], [89.3, 10383.0], [89.4, 10461.0], [89.5, 10758.0], [89.6, 10808.0], [89.7, 11010.0], [89.8, 11137.0], [89.9, 11317.0], [90.0, 11337.0], [90.1, 11511.0], [90.2, 11567.0], [90.3, 11649.0], [90.4, 11769.0], [90.5, 11882.0], [90.6, 11908.0], [90.7, 12024.0], [90.8, 12040.0], [90.9, 12094.0], [91.0, 12116.0], [91.1, 12291.0], [91.2, 12404.0], [91.3, 12445.0], [91.4, 12520.0], [91.5, 12611.0], [91.6, 12708.0], [91.7, 12783.0], [91.8, 12817.0], [91.9, 12868.0], [92.0, 12948.0], [92.1, 12992.0], [92.2, 13032.0], [92.3, 13126.0], [92.4, 13293.0], [92.5, 13431.0], [92.6, 13608.0], [92.7, 13769.0], [92.8, 13825.0], [92.9, 13838.0], [93.0, 13909.0], [93.1, 13967.0], [93.2, 14129.0], [93.3, 14288.0], [93.4, 14399.0], [93.5, 14588.0], [93.6, 14765.0], [93.7, 14877.0], [93.8, 14950.0], [93.9, 15112.0], [94.0, 15212.0], [94.1, 15258.0], [94.2, 15326.0], [94.3, 15577.0], [94.4, 15618.0], [94.5, 15870.0], [94.6, 15879.0], [94.7, 16071.0], [94.8, 16285.0], [94.9, 16330.0], [95.0, 16653.0], [95.1, 16772.0], [95.2, 16952.0], [95.3, 17245.0], [95.4, 17369.0], [95.5, 17754.0], [95.6, 17860.0], [95.7, 18083.0], [95.8, 18346.0], [95.9, 18760.0], [96.0, 19140.0], [96.1, 19379.0], [96.2, 19535.0], [96.3, 19909.0], [96.4, 20266.0], [96.5, 20836.0], [96.6, 21037.0], [96.7, 21054.0], [96.8, 21432.0], [96.9, 21784.0], [97.0, 21842.0], [97.1, 21994.0], [97.2, 22096.0], [97.3, 22652.0], [97.4, 22869.0], [97.5, 23288.0], [97.6, 23710.0], [97.7, 23959.0], [97.8, 24916.0], [97.9, 25356.0], [98.0, 25770.0], [98.1, 26162.0], [98.2, 27109.0], [98.3, 27953.0], [98.4, 29013.0], [98.5, 30105.0], [98.6, 30195.0], [98.7, 30854.0], [98.8, 30968.0], [98.9, 32704.0], [99.0, 33427.0], [99.1, 35097.0], [99.2, 36306.0], [99.3, 37828.0], [99.4, 39499.0], [99.5, 39980.0], [99.6, 40291.0], [99.7, 40981.0], [99.8, 42092.0], [99.9, 47277.0], [100.0, 48368.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 395.0, "series": [{"data": [[32900.0, 1.0], [34900.0, 1.0], [39700.0, 1.0], [40500.0, 1.0], [40900.0, 1.0], [500.0, 209.0], [600.0, 395.0], [700.0, 218.0], [800.0, 141.0], [900.0, 112.0], [1000.0, 82.0], [1100.0, 69.0], [1200.0, 56.0], [1300.0, 53.0], [1400.0, 47.0], [1500.0, 38.0], [1600.0, 41.0], [1700.0, 27.0], [1800.0, 26.0], [1900.0, 31.0], [2000.0, 39.0], [2100.0, 27.0], [2200.0, 16.0], [2300.0, 25.0], [2400.0, 23.0], [2500.0, 24.0], [2600.0, 21.0], [2700.0, 30.0], [2800.0, 11.0], [2900.0, 12.0], [3000.0, 14.0], [3100.0, 14.0], [3300.0, 11.0], [3200.0, 10.0], [3400.0, 15.0], [3500.0, 13.0], [3600.0, 8.0], [3700.0, 14.0], [3800.0, 11.0], [3900.0, 13.0], [4000.0, 3.0], [4200.0, 6.0], [4100.0, 5.0], [4300.0, 5.0], [4600.0, 8.0], [4500.0, 12.0], [4400.0, 5.0], [4700.0, 6.0], [4800.0, 6.0], [5000.0, 6.0], [4900.0, 8.0], [5100.0, 3.0], [5300.0, 13.0], [5200.0, 9.0], [5400.0, 5.0], [5600.0, 8.0], [5500.0, 7.0], [5700.0, 7.0], [5800.0, 6.0], [5900.0, 5.0], [6000.0, 12.0], [6100.0, 4.0], [6300.0, 6.0], [6200.0, 8.0], [6400.0, 9.0], [6600.0, 5.0], [6500.0, 3.0], [6800.0, 6.0], [6700.0, 8.0], [6900.0, 6.0], [7000.0, 9.0], [7100.0, 2.0], [7200.0, 6.0], [7300.0, 3.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 4.0], [7900.0, 4.0], [7700.0, 4.0], [7800.0, 3.0], [8000.0, 5.0], [8100.0, 4.0], [8200.0, 5.0], [8300.0, 3.0], [8500.0, 6.0], [8700.0, 5.0], [8400.0, 4.0], [8600.0, 4.0], [8900.0, 5.0], [9200.0, 4.0], [9100.0, 6.0], [8800.0, 3.0], [9000.0, 2.0], [9300.0, 4.0], [9500.0, 4.0], [9400.0, 3.0], [9600.0, 3.0], [9700.0, 5.0], [10000.0, 3.0], [10100.0, 2.0], [10200.0, 4.0], [9900.0, 2.0], [9800.0, 3.0], [10300.0, 6.0], [10700.0, 3.0], [10400.0, 2.0], [10600.0, 1.0], [11200.0, 2.0], [11100.0, 1.0], [11000.0, 2.0], [10900.0, 2.0], [10800.0, 1.0], [11600.0, 3.0], [11300.0, 3.0], [11700.0, 2.0], [11400.0, 1.0], [11500.0, 4.0], [11900.0, 2.0], [12000.0, 8.0], [11800.0, 4.0], [12100.0, 2.0], [12200.0, 2.0], [12500.0, 3.0], [12400.0, 5.0], [12700.0, 4.0], [12600.0, 2.0], [12300.0, 1.0], [12800.0, 6.0], [13100.0, 2.0], [12900.0, 5.0], [13300.0, 2.0], [13000.0, 2.0], [13200.0, 2.0], [13800.0, 5.0], [13600.0, 3.0], [13400.0, 1.0], [13500.0, 1.0], [13700.0, 2.0], [14100.0, 2.0], [13900.0, 4.0], [14300.0, 2.0], [14200.0, 2.0], [14000.0, 1.0], [14500.0, 1.0], [14700.0, 2.0], [14800.0, 3.0], [14400.0, 2.0], [15200.0, 5.0], [15000.0, 2.0], [15100.0, 2.0], [14900.0, 2.0], [15300.0, 2.0], [15500.0, 2.0], [15600.0, 2.0], [15800.0, 4.0], [15400.0, 1.0], [16200.0, 4.0], [15900.0, 2.0], [16000.0, 1.0], [16300.0, 1.0], [17200.0, 2.0], [16600.0, 1.0], [16800.0, 1.0], [17000.0, 1.0], [16400.0, 1.0], [18000.0, 2.0], [17800.0, 2.0], [17600.0, 1.0], [19400.0, 1.0], [20200.0, 1.0], [20400.0, 1.0], [20800.0, 1.0], [21000.0, 5.0], [21200.0, 1.0], [21400.0, 1.0], [22000.0, 2.0], [21800.0, 2.0], [23200.0, 3.0], [22600.0, 2.0], [22800.0, 2.0], [23800.0, 1.0], [23600.0, 1.0], [24800.0, 1.0], [25000.0, 2.0], [26400.0, 1.0], [25600.0, 1.0], [25800.0, 1.0], [27600.0, 1.0], [27800.0, 1.0], [28200.0, 1.0], [29000.0, 1.0], [30400.0, 1.0], [30800.0, 1.0], [32200.0, 1.0], [39600.0, 1.0], [42000.0, 2.0], [44800.0, 1.0], [44400.0, 1.0], [47200.0, 1.0], [36300.0, 1.0], [37500.0, 1.0], [38700.0, 1.0], [39900.0, 1.0], [48300.0, 2.0], [16900.0, 2.0], [17300.0, 2.0], [16700.0, 3.0], [18100.0, 1.0], [17900.0, 1.0], [17700.0, 1.0], [18300.0, 3.0], [18700.0, 2.0], [19100.0, 2.0], [19300.0, 2.0], [19700.0, 2.0], [19900.0, 2.0], [20300.0, 1.0], [19500.0, 1.0], [21500.0, 2.0], [21900.0, 2.0], [21700.0, 2.0], [22100.0, 1.0], [23900.0, 2.0], [23700.0, 1.0], [24900.0, 1.0], [25300.0, 1.0], [26100.0, 1.0], [25900.0, 1.0], [25700.0, 1.0], [27100.0, 1.0], [27900.0, 1.0], [29500.0, 1.0], [29700.0, 1.0], [30100.0, 3.0], [30700.0, 1.0], [30900.0, 2.0], [32700.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [33400.0, 1.0], [35000.0, 1.0], [35400.0, 1.0], [37000.0, 1.0], [37800.0, 1.0], [39400.0, 1.0], [40200.0, 2.0], [40600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 48300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1382.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1382.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1116.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.1796407185628754, "minX": 1.6565286E12, "maxY": 33.92715231788079, "series": [{"data": [[1.65652884E12, 25.63451776649746], [1.6565295E12, 4.707142857142856], [1.65652944E12, 31.995073891625633], [1.65652914E12, 16.594117647058823], [1.6565286E12, 2.384615384615386], [1.65652926E12, 5.86627906976744], [1.6565292E12, 3.5426829268292686], [1.6565289E12, 9.20238095238096], [1.65652932E12, 3.5209580838323356], [1.65652902E12, 6.577922077922074], [1.65652896E12, 3.3090909090909086], [1.65652866E12, 2.1796407185628754], [1.65652908E12, 8.378531073446327], [1.65652878E12, 33.92715231788079], [1.65652872E12, 3.7297297297297294], [1.65652938E12, 7.091603053435116]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6565295E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 608.0, "minX": 1.0, "maxY": 35459.0, "series": [{"data": [[2.0, 630.4803921568624], [3.0, 997.6352941176476], [4.0, 1578.9710144927526], [5.0, 2030.4876033057858], [6.0, 3062.979166666668], [7.0, 2751.297297297297], [8.0, 2865.672727272727], [9.0, 4339.666666666665], [10.0, 3865.156862745099], [11.0, 5522.955555555557], [12.0, 3543.7551020408173], [13.0, 4930.953488372093], [14.0, 7848.179487179488], [15.0, 6991.636363636365], [16.0, 5509.2], [17.0, 6457.216216216218], [18.0, 6777.7222222222235], [19.0, 5571.066666666667], [20.0, 7608.1875], [21.0, 5458.538461538462], [22.0, 9560.42857142857], [23.0, 8787.47619047619], [24.0, 10769.409090909088], [25.0, 10233.4], [26.0, 10852.23076923077], [27.0, 11581.818181818182], [28.0, 8601.666666666666], [29.0, 12909.285714285714], [30.0, 6846.714285714286], [31.0, 9604.333333333334], [33.0, 9463.923076923074], [32.0, 12671.263157894737], [35.0, 12352.000000000002], [34.0, 11388.500000000002], [36.0, 18251.615384615387], [37.0, 14057.166666666664], [39.0, 11909.0], [38.0, 9573.000000000002], [40.0, 11052.222222222223], [41.0, 8644.57142857143], [43.0, 10726.375], [42.0, 9126.8], [45.0, 13124.636363636364], [44.0, 15683.0], [47.0, 15501.0], [46.0, 10050.714285714286], [49.0, 13978.833333333332], [48.0, 12977.999999999998], [51.0, 16016.699999999999], [50.0, 17723.85714285714], [53.0, 13515.4], [52.0, 15955.5], [55.0, 19533.5], [54.0, 16481.0], [56.0, 18141.0], [57.0, 13825.0], [59.0, 13109.666666666668], [61.0, 35459.0], [60.0, 10808.0], [63.0, 907.0], [62.0, 14288.0], [67.0, 5527.0], [66.0, 6623.5], [64.0, 11407.0], [71.0, 13403.0], [69.0, 19535.0], [68.0, 845.0], [75.0, 25770.0], [74.0, 16406.5], [72.0, 15879.0], [76.0, 15613.2], [79.0, 23691.0], [78.0, 5234.0], [77.0, 6691.0], [80.0, 27953.0], [83.0, 16323.250000000002], [82.0, 15804.0], [81.0, 6075.0], [87.0, 15870.0], [86.0, 24194.666666666668], [85.0, 11488.5], [84.0, 32954.0], [1.0, 608.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[11.528400000000005, 3949.474800000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 87.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 54.6, "minX": 1.6565286E12, "maxY": 16044.3, "series": [{"data": [[1.65652884E12, 15635.233333333334], [1.6565295E12, 11111.333333333334], [1.65652944E12, 16044.3], [1.65652914E12, 13492.333333333334], [1.6565286E12, 2063.5333333333333], [1.65652926E12, 13651.066666666668], [1.6565292E12, 13016.133333333333], [1.6565289E12, 13333.6], [1.65652932E12, 13254.233333333334], [1.65652902E12, 12222.466666666667], [1.65652896E12, 13095.5], [1.65652866E12, 13254.233333333334], [1.65652908E12, 14047.9], [1.65652878E12, 11984.366666666667], [1.65652872E12, 11746.266666666666], [1.65652938E12, 10397.033333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65652884E12, 413.7], [1.6565295E12, 294.0], [1.65652944E12, 422.1], [1.65652914E12, 357.0], [1.6565286E12, 54.6], [1.65652926E12, 361.2], [1.6565292E12, 344.4], [1.6565289E12, 352.8], [1.65652932E12, 350.7], [1.65652902E12, 323.4], [1.65652896E12, 346.5], [1.65652866E12, 350.7], [1.65652908E12, 371.7], [1.65652878E12, 317.1], [1.65652872E12, 310.8], [1.65652938E12, 275.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6565295E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 657.8083832335334, "minX": 1.6565286E12, "maxY": 11591.529801324503, "series": [{"data": [[1.65652884E12, 9271.55837563452], [1.6565295E12, 1533.7857142857142], [1.65652944E12, 11326.113300492607], [1.65652914E12, 5698.564705882352], [1.6565286E12, 713.8076923076924], [1.65652926E12, 1952.8488372093], [1.6565292E12, 1084.1463414634154], [1.6565289E12, 3129.309523809522], [1.65652932E12, 1094.3832335329348], [1.65652902E12, 2122.012987012987], [1.65652896E12, 1014.3030303030307], [1.65652866E12, 657.8083832335334], [1.65652908E12, 2830.8926553672327], [1.65652878E12, 11591.529801324503], [1.65652872E12, 1117.5135135135133], [1.65652938E12, 2312.8473282442737]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6565295E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 657.7305389221561, "minX": 1.6565286E12, "maxY": 11591.476821192051, "series": [{"data": [[1.65652884E12, 9271.492385786803], [1.6565295E12, 1533.7500000000007], [1.65652944E12, 11118.743842364529], [1.65652914E12, 5698.552941176472], [1.6565286E12, 713.1538461538462], [1.65652926E12, 1952.8081395348834], [1.6565292E12, 1084.1219512195125], [1.6565289E12, 3129.279761904761], [1.65652932E12, 1094.3592814371264], [1.65652902E12, 2121.974025974026], [1.65652896E12, 1014.2666666666665], [1.65652866E12, 657.7305389221561], [1.65652908E12, 2830.881355932203], [1.65652878E12, 11591.476821192051], [1.65652872E12, 1117.3986486486485], [1.65652938E12, 2312.8091603053435]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6565295E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 439.89221556886224, "minX": 1.6565286E12, "maxY": 8668.438423645326, "series": [{"data": [[1.65652884E12, 6382.949238578682], [1.6565295E12, 1045.257142857142], [1.65652944E12, 8668.438423645326], [1.65652914E12, 3925.658823529408], [1.6565286E12, 495.3076923076923], [1.65652926E12, 1295.1220930232564], [1.6565292E12, 740.3048780487807], [1.6565289E12, 2154.761904761906], [1.65652932E12, 746.8922155688621], [1.65652902E12, 1371.727272727273], [1.65652896E12, 664.4303030303029], [1.65652866E12, 439.89221556886224], [1.65652908E12, 1985.9491525423707], [1.65652878E12, 7696.298013245031], [1.65652872E12, 715.506756756757], [1.65652938E12, 1405.3129770992364]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6565295E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 560.0, "minX": 1.6565286E12, "maxY": 48368.0, "series": [{"data": [[1.65652884E12, 44445.0], [1.6565295E12, 7509.0], [1.65652944E12, 48368.0], [1.65652914E12, 21994.0], [1.6565286E12, 1516.0], [1.65652926E12, 11010.0], [1.6565292E12, 4113.0], [1.6565289E12, 9651.0], [1.65652932E12, 3424.0], [1.65652902E12, 8574.0], [1.65652896E12, 3783.0], [1.65652866E12, 1346.0], [1.65652908E12, 13385.0], [1.65652878E12, 44812.0], [1.65652872E12, 4216.0], [1.65652938E12, 12993.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65652884E12, 16526.00000000004], [1.6565295E12, 4191.600000000002], [1.65652944E12, 35069.0], [1.65652914E12, 14062.000000000002], [1.6565286E12, 1135.8000000000002], [1.65652926E12, 4927.100000000001], [1.6565292E12, 2159.0], [1.6565289E12, 6817.299999999999], [1.65652932E12, 1978.600000000001], [1.65652902E12, 3878.0], [1.65652896E12, 1506.0000000000002], [1.65652866E12, 798.8000000000002], [1.65652908E12, 7214.000000000001], [1.65652878E12, 21979.0], [1.65652872E12, 1667.6999999999998], [1.65652938E12, 5522.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65652884E12, 39817.440000000046], [1.6565295E12, 7414.290000000001], [1.65652944E12, 48324.61999999999], [1.65652914E12, 20191.30999999998], [1.6565286E12, 1516.0], [1.65652926E12, 10076.330000000013], [1.6565292E12, 3901.099999999998], [1.6565289E12, 9404.67], [1.65652932E12, 3400.8799999999997], [1.65652902E12, 8563.0], [1.65652896E12, 3384.360000000002], [1.65652866E12, 1236.5199999999988], [1.65652908E12, 11335.939999999997], [1.65652878E12, 37613.11999999986], [1.65652872E12, 4103.789999999998], [1.65652938E12, 12118.760000000018]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65652884E12, 24930.0], [1.6565295E12, 5107.999999999998], [1.65652944E12, 40238.299999999996], [1.65652914E12, 16309.65], [1.6565286E12, 1467.6999999999998], [1.65652926E12, 6364.5999999999985], [1.6565292E12, 3069.25], [1.6565289E12, 8518.449999999999], [1.65652932E12, 2393.9999999999995], [1.65652902E12, 6228.25], [1.65652896E12, 2001.2999999999995], [1.65652866E12, 951.5999999999998], [1.65652908E12, 8660.399999999998], [1.65652878E12, 23947.0], [1.65652872E12, 2225.799999999999], [1.65652938E12, 6499.7999999999965]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65652884E12, 853.0], [1.6565295E12, 575.0], [1.65652944E12, 576.0], [1.65652914E12, 574.0], [1.6565286E12, 581.0], [1.65652926E12, 574.0], [1.6565292E12, 560.0], [1.6565289E12, 584.0], [1.65652932E12, 573.0], [1.65652902E12, 576.0], [1.65652896E12, 574.0], [1.65652866E12, 573.0], [1.65652908E12, 579.0], [1.65652878E12, 629.0], [1.65652872E12, 586.0], [1.65652938E12, 576.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65652884E12, 8065.0], [1.6565295E12, 848.5], [1.65652944E12, 1276.0], [1.65652914E12, 3956.5], [1.6565286E12, 645.0], [1.65652926E12, 1083.5], [1.6565292E12, 667.5], [1.6565289E12, 2277.0], [1.65652932E12, 844.0], [1.65652902E12, 1723.5], [1.65652896E12, 847.0], [1.65652866E12, 609.0], [1.65652908E12, 1643.0], [1.65652878E12, 11275.0], [1.65652872E12, 924.5], [1.65652938E12, 1461.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6565295E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 687.0, "minX": 1.0, "maxY": 21051.0, "series": [{"data": [[2.0, 854.0], [8.0, 2801.5], [9.0, 5794.5], [10.0, 5584.0], [11.0, 8134.5], [3.0, 687.0], [12.0, 5962.5], [13.0, 8810.0], [14.0, 7920.0], [15.0, 10918.0], [4.0, 1200.0], [1.0, 2048.5], [16.0, 12005.5], [18.0, 10808.0], [5.0, 1635.0], [21.0, 9865.0], [6.0, 2383.0], [24.0, 4244.0], [7.0, 2402.5], [29.0, 8368.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 21051.0], [10.0, 21043.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 12005.0, "series": [{"data": [[2.0, 854.0], [8.0, 2801.0], [9.0, 5794.5], [10.0, 5584.0], [11.0, 8134.5], [3.0, 686.5], [12.0, 5962.5], [13.0, 8810.0], [14.0, 7920.0], [15.0, 10918.0], [4.0, 1200.0], [1.0, 2048.5], [16.0, 12005.0], [18.0, 10808.0], [5.0, 1635.0], [21.0, 9865.0], [6.0, 2383.0], [24.0, 4244.0], [7.0, 2402.0], [29.0, 8368.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 0.0], [10.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.6565286E12, "maxY": 2.783333333333333, "series": [{"data": [[1.65652884E12, 2.783333333333333], [1.6565295E12, 2.316666666666667], [1.65652944E12, 2.7666666666666666], [1.65652914E12, 2.783333333333333], [1.6565286E12, 0.4666666666666667], [1.65652926E12, 2.7666666666666666], [1.6565292E12, 2.783333333333333], [1.6565289E12, 2.7666666666666666], [1.65652932E12, 2.783333333333333], [1.65652902E12, 2.783333333333333], [1.65652896E12, 2.783333333333333], [1.65652866E12, 2.783333333333333], [1.65652908E12, 2.7666666666666666], [1.65652878E12, 2.783333333333333], [1.65652872E12, 2.7666666666666666], [1.65652938E12, 2.783333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6565295E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6565286E12, "maxY": 3.35, "series": [{"data": [[1.65652884E12, 3.283333333333333], [1.6565295E12, 2.3333333333333335], [1.65652944E12, 3.35], [1.65652914E12, 2.8333333333333335], [1.6565286E12, 0.43333333333333335], [1.65652926E12, 2.8666666666666667], [1.6565292E12, 2.7333333333333334], [1.6565289E12, 2.8], [1.65652932E12, 2.783333333333333], [1.65652902E12, 2.566666666666667], [1.65652896E12, 2.75], [1.65652866E12, 2.783333333333333], [1.65652908E12, 2.95], [1.65652878E12, 2.5166666666666666], [1.65652872E12, 2.466666666666667], [1.65652938E12, 2.183333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65652944E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6565295E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6565286E12, "maxY": 3.35, "series": [{"data": [[1.65652884E12, 3.283333333333333], [1.6565295E12, 2.3333333333333335], [1.65652944E12, 3.35], [1.65652914E12, 2.8333333333333335], [1.6565286E12, 0.43333333333333335], [1.65652926E12, 2.8666666666666667], [1.6565292E12, 2.7333333333333334], [1.6565289E12, 2.8], [1.65652932E12, 2.783333333333333], [1.65652902E12, 2.566666666666667], [1.65652896E12, 2.75], [1.65652866E12, 2.783333333333333], [1.65652908E12, 2.95], [1.65652878E12, 2.5166666666666666], [1.65652872E12, 2.466666666666667], [1.65652938E12, 2.183333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.65652944E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6565295E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.6565286E12, "maxY": 3.35, "series": [{"data": [[1.65652884E12, 3.283333333333333], [1.6565295E12, 2.3333333333333335], [1.65652944E12, 3.35], [1.65652914E12, 2.8333333333333335], [1.6565286E12, 0.43333333333333335], [1.65652926E12, 2.8666666666666667], [1.6565292E12, 2.7333333333333334], [1.6565289E12, 2.8], [1.65652932E12, 2.783333333333333], [1.65652902E12, 2.566666666666667], [1.65652896E12, 2.75], [1.65652866E12, 2.783333333333333], [1.65652908E12, 2.95], [1.65652878E12, 2.5166666666666666], [1.65652872E12, 2.466666666666667], [1.65652938E12, 2.183333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65652944E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6565295E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

